Java 8 features:
================
1. lambda expressions
2. functional interface
3. predicate
4. comsumer
5. supplier
6. Function
7. stream API

lambda expressions:
===================
1. it also called anonymous function(without name).
2. there is return type
3. there is no access modifiers

1. 
public int add(int a , int b){
	return a+b;
}
(int a, int b)->{
	return a+b;
}

2. 
public String findLength(String s){
	return s.length();
}

(String s )-> { return s.length()}

3. 
public void print(){
	syso("Hello world");
}

()->{syso("Hello world")}


Important points:
=================
1. no need to specifiy the type of the data
(a,b)->{
	return a+b;
}
2. if the statment is single line then not require of {} and return

	(s)->s.length()
	
3. if you ae passing the single paratmater then no nedd to ()
	s->s.length()

4. if ther is no parameter then () is must.
	()->{syso("Hello world")}

5. if there is a multiple parameter then it need to seperate by ,
	(a,b)->a+b


functional interface:
=====================
* Interface containn only one abstract method.

example: comparator.
* @FunctionalInterfe -> functional interface

collection:
===========
* to represent a group of individual objects as a single entity then we should go for collection.

streams:
========
* to work with multiple objects or collection then we should go for streams

1. source:
==========
* on which you are applying the stream

2. intermidiate operation:
==========================
* the opeartion will return the another stream

3. termination operation:
=========================
* it will terminate the stream
* after applyig the termination opeartion on streams we cannot reuse it.
* for each stream we can use only one termination operation.

example:
========
List<Integer> list = new ArrayList<>();
list.add(12);
list.add(10);

list.stream().filter(x->x%2==0).count();